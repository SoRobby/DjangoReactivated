import React from "react";
import { DjangoFormsWidgetsHiddenInput, Types } from "../generated";
import { DiscriminateUnion } from "../types";
import * as widgets from "./widgets";
export declare type Optgroup = Types["Optgroup"];
export interface WidgetLike {
    name: string;
    tag: string;
    is_hidden: boolean;
    attrs: {
        disabled?: boolean;
        id: string;
    };
    subwidgets?: WidgetLike[];
    value: unknown;
}
interface FieldLike<W = WidgetLike> {
    name: string;
    widget: W;
    label: string;
    help_text: string | null;
}
export interface FieldMap<W = WidgetLike> {
    [name: string]: FieldLike<W>;
}
export interface FormLike<T extends FieldMap<W>, W = WidgetLike> {
    name: string;
    fields: T;
    errors: {
        [P in keyof T]?: string[];
    } | null;
    iterator: Array<Extract<keyof T, string>>;
    prefix: string;
}
export interface FormSetLike<T extends FieldMap<W>, W = WidgetLike> {
    initial_form_count: number;
    total_form_count: number;
    max_num: number;
    min_num: number;
    can_delete: boolean;
    can_order: boolean;
    non_form_errors: string[];
    management_form: unknown;
    prefix: string;
    forms: Array<FormLike<T, W>>;
    empty_form: FormLike<T, W>;
}
export declare type FormErrors<T extends FieldMap> = {
    [P in keyof T]?: string[];
} | null;
export declare type FormValues<T extends FieldMap> = {
    [K in keyof T]: T[K] extends {
        enum: unknown;
    } ? T[K]["enum"] | null : T[K]["widget"] extends {
        _reactivated_value_do_not_use?: unknown;
    } ? NonNullable<T[K]["widget"]["_reactivated_value_do_not_use"]> : T[K]["widget"]["value"];
};
export interface FormHandler<T extends FieldMap> {
    form: FormLike<T>;
    values: FormValues<T>;
    initial: FormValues<T>;
    errors: FormErrors<T>;
    fields: {
        [K in keyof T]: FieldHandler<T[keyof T]["widget"]>;
    };
    visibleFields: FieldHandler<T[keyof T]["widget"]>[];
    hiddenFields: FieldHandler<DjangoFormsWidgetsHiddenInput>[];
    nonFieldErrors: string[] | null;
    setValue: <K extends keyof T>(name: K, value: FormValues<T>[K]) => void;
    setErrors: (errors: FormErrors<T>) => void;
    iterate: (iterator: Array<Extract<keyof T, string>>, callback: (fieldName: keyof T, field: FieldHandler<T[keyof T]["widget"]>) => React.ReactNode) => React.ReactNode[];
    reset: () => void;
}
export declare const getInitialFormState: <T extends FieldMap<WidgetLike>>(form: FormLike<T, WidgetLike>) => FormValues<T>;
export declare const getInitialFormSetState: <T extends FieldMap<WidgetLike>>(forms: FormLike<T, WidgetLike>[]) => {
    [k: string]: FormValues<T>;
};
export declare const getInitialFormSetErrors: <T extends FieldMap<WidgetLike>>(forms: FormLike<T, WidgetLike>[]) => {
    [k: string]: { [P in keyof T]?: string[] | undefined; } | null;
};
export declare const getFormHandler: <T extends FieldMap<WidgetLike>>({ form, values, initial, errors, setValues, setErrors, ...options }: {
    form: FormLike<T, WidgetLike>;
    values: FormValues<T>;
    initial: FormValues<T>;
    errors: FormErrors<T>;
    setErrors: (errors: FormErrors<T>) => void;
    setValues: (getValuesToSetFromPrevValues: (values: FormValues<T>) => FormValues<T>) => void;
    fieldInterceptor?: ((fieldName: keyof T, field: FieldHandler<T[keyof T]["widget"]>, values: FormValues<T>) => FieldHandler<T[keyof T]["widget"]>) | undefined;
    changeInterceptor?: ((name: keyof T, prevValues: FormValues<T>, nextValues: FormValues<T>) => FormValues<T>) | undefined;
}) => FormHandler<T>;
export declare const useForm: <T extends FieldMap<WidgetLike>>({ form, ...options }: {
    form: FormLike<T, WidgetLike>;
    fieldInterceptor?: ((fieldName: keyof T, field: FieldHandler<T[keyof T]["widget"]>, values: FormValues<T>) => FieldHandler<T[keyof T]["widget"]>) | undefined;
    changeInterceptor?: ((name: keyof T, prevValues: FormValues<T>, nextValues: FormValues<T>) => FormValues<T>) | undefined;
}) => FormHandler<T>;
export declare type CreateFieldHandler<T> = T extends {
    tag: string;
    name: string;
    subwidgets: infer U;
} ? SubwidgetHandler<T, U> : T extends WidgetLike ? WidgetHandler<T> : never;
export interface SubwidgetHandler<T extends {
    tag: string;
    name: string;
}, U> {
    tag: T["tag"];
    name: string;
    label: string;
    error: string | null;
    help_text: string | null;
    disabled: boolean;
    subwidgets: {
        [K in keyof U]: U[K] extends WidgetLike ? WidgetHandler<U[K]> : never;
    };
}
export interface WidgetHandler<T extends WidgetLike> {
    tag: T["tag"];
    name: string;
    value: T["value"];
    label: string;
    error: string | null;
    help_text: string | null;
    disabled: boolean;
    widget: T;
    handler: (value: T["value"]) => void;
}
export declare type FieldHandler<TWidget extends WidgetLike> = {
    [K in TWidget["tag"]]: CreateFieldHandler<DiscriminateUnion<TWidget, "tag", K>>;
}[TWidget["tag"]];
interface BaseRendererProps<T extends FieldMap, F extends WidgetLike> {
    fieldInterceptor?: (fieldName: keyof T, field: FieldHandler<F>, values: FormValues<T>) => typeof field;
    changeInterceptor?: (name: keyof T, prevValues: FormValues<T>, nextValues: FormValues<T>) => FormValues<T>;
    form: FormLike<T> | FormHandler<T>;
    children: (field: FieldHandler<F>) => React.ReactNode;
}
interface IncludeRendererProps<T extends FieldMap, F extends WidgetLike> extends BaseRendererProps<T, F> {
    fields?: Array<Extract<keyof T, string>>;
    exclude?: never;
}
interface ExcludeRendererProps<T extends FieldMap, F extends WidgetLike> extends BaseRendererProps<T, F> {
    fields?: never;
    exclude: Array<Extract<keyof T, string>>;
}
export declare type RendererProps<T extends FieldMap, F extends WidgetLike> = IncludeRendererProps<T, F> | ExcludeRendererProps<T, F>;
export declare const createIterator: <F extends WidgetLike>() => <U extends FieldMap<WidgetLike>>(props: RendererProps<U, F>) => JSX.Element;
export declare const Widget: (props: {
    field: FieldHandler<widgets.CoreWidget>;
}) => JSX.Element;
export declare const ManagementForm: <T extends FieldMap<WidgetLike>>({ formSet, }: {
    formSet: FormSetLike<T, WidgetLike>;
}) => JSX.Element;
export declare const useFormSet: <T extends FieldMap<WidgetLike>>(options: {
    formSet: FormSetLike<T, WidgetLike>;
    onAddForm?: ((form: FormLike<T, WidgetLike>) => void) | undefined;
    fieldInterceptor?: ((fieldName: keyof T, field: FieldHandler<T[keyof T]["widget"]>, values: FormValues<T>) => FieldHandler<T[keyof T]["widget"]>) | undefined;
    changeInterceptor?: ((name: keyof T, prevValues: FormValues<T>, nextValues: FormValues<T>) => FormValues<T>) | undefined;
}) => {
    schema: FormSetLike<T, WidgetLike>;
    values: Partial<{
        [k: string]: FormValues<T>;
    }>;
    forms: FormHandler<T>[];
    addForm: () => void;
};
export declare const bindWidgetType: <W extends WidgetLike>() => {
    createRenderer: <TProps = Record<never, never>>(callback: (field: FieldHandler<W>, props: TProps) => React.ReactNode) => {
        <T extends FieldMap<WidgetLike>>(props: TProps & RendererProps<T, W>): JSX.Element;
        defaultProps: {
            children: () => null;
        };
    };
    Iterator: <U extends FieldMap<WidgetLike>>(props: RendererProps<U, W>) => JSX.Element;
};
export declare const createCSRFToken: <TContext extends {
    csrf_token: string;
}>(Context: React.Context<TContext>) => (props: {}) => JSX.Element;
export declare const Form: <T extends FieldMap<DjangoFormsWidgetsHiddenInput | import("../generated").DjangoFormsWidgetsTextInput | import("../generated").DjangoFormsWidgetsNumberInput | import("../generated").DjangoFormsWidgetsURLInput | import("../generated").DjangoFormsWidgetsTimeInput | import("../generated").DjangoFormsWidgetsDateInput | import("../generated").DjangoFormsWidgetsCheckboxInput | import("../generated").DjangoFormsWidgetsPasswordInput | import("../generated").DjangoFormsWidgetsEmailInput | import("../generated").DjangoFormsWidgetsTextarea | import("../generated").DjangoFormsWidgetsSelect | import("../generated").DjangoFormsWidgetsSelectMultiple | import("../generated").DjangoFormsWidgetsClearableFileInput | import("../generated").DjangoFormsWidgetsSelectDateWidget | import("../generated").DjangoFormsWidgetsSplitDateTimeWidget>>(props: {
    form: FormLike<T, WidgetLike> | FormHandler<T>;
    as: "p" | "table";
}) => JSX.Element;
export declare const FormSet: <T extends FieldMap<DjangoFormsWidgetsHiddenInput | import("../generated").DjangoFormsWidgetsTextInput | import("../generated").DjangoFormsWidgetsNumberInput | import("../generated").DjangoFormsWidgetsURLInput | import("../generated").DjangoFormsWidgetsTimeInput | import("../generated").DjangoFormsWidgetsDateInput | import("../generated").DjangoFormsWidgetsCheckboxInput | import("../generated").DjangoFormsWidgetsPasswordInput | import("../generated").DjangoFormsWidgetsEmailInput | import("../generated").DjangoFormsWidgetsTextarea | import("../generated").DjangoFormsWidgetsSelect | import("../generated").DjangoFormsWidgetsSelectMultiple | import("../generated").DjangoFormsWidgetsClearableFileInput | import("../generated").DjangoFormsWidgetsSelectDateWidget | import("../generated").DjangoFormsWidgetsSplitDateTimeWidget>>(props: {
    formSet: FormSetLike<T, WidgetLike>;
    as: "p" | "table";
}) => JSX.Element;
export {};
