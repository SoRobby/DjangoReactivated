{"version":3,"sources":["../src/index.ts"],"names":["path","fs","slugify","transform","transformSync","nodeModulesRegex","linaria","sourceMap","preprocessor","esbuildOptions","rest","name","setup","build","cssLookup","Map","onResolve","filter","args","namespace","onLoad","contents","get","loader","resolveDir","basename","rawCode","readFileSync","ext","filename","parse","replace","test","initialOptions","jsxFactory","jsxFragment","code","result","pluginOptions","cssText","slug","cssFilename","cssSourceMapText","map","Buffer","from","toString","set","JSON","stringify"],"mappings":"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","sourcesContent":["/**\n * This file contains an esbuild loader for Linaria.\n * It uses the transform.ts function to generate class names from source code,\n * returns transformed code without template literals and attaches generated source maps\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport type { PluginOptions, Preprocessor } from '@linaria/babel-preset';\nimport { slugify, transform } from '@linaria/babel-preset';\nimport { transformSync, Plugin, TransformOptions, Loader } from 'esbuild';\n\ntype EsbuildPluginOptions = {\n  sourceMap?: boolean;\n  preprocessor?: Preprocessor;\n  esbuildOptions?: TransformOptions;\n} & Partial<PluginOptions>;\n\nconst nodeModulesRegex = /^(?:.*[\\\\/])?node_modules(?:[\\\\/].*)?$/;\n\nexport default function linaria({\n  sourceMap,\n  preprocessor,\n  esbuildOptions,\n  ...rest\n}: EsbuildPluginOptions = {}): Plugin {\n  return {\n    name: 'linaria',\n    setup(build) {\n      const cssLookup = new Map<string, string>();\n\n      build.onResolve({ filter: /\\.linaria\\.css$/ }, (args) => {\n        return {\n          namespace: 'linaria',\n          path: args.path,\n        };\n      });\n\n      build.onLoad({ filter: /.*/, namespace: 'linaria' }, (args) => {\n        return {\n          contents: cssLookup.get(args.path),\n          loader: 'css',\n          resolveDir: path.basename(args.path),\n        };\n      });\n\n      build.onLoad({ filter: /\\.(js|jsx|ts|tsx)$/ }, (args) => {\n        const rawCode = fs.readFileSync(args.path, 'utf8');\n        const { ext, name: filename } = path.parse(args.path);\n        const loader = ext.replace(/^\\./, '') as Loader;\n\n        if (nodeModulesRegex.test(args.path)) {\n          return {\n            loader,\n            contents: rawCode,\n          };\n        }\n\n        if (typeof esbuildOptions === 'undefined') {\n          esbuildOptions = {};\n          if ('jsxFactory' in build.initialOptions) {\n            esbuildOptions.jsxFactory = build.initialOptions.jsxFactory;\n          }\n          if ('jsxFragment' in build.initialOptions) {\n            esbuildOptions.jsxFragment = build.initialOptions.jsxFragment;\n          }\n        }\n\n        const { code } = transformSync(rawCode, {\n          ...esbuildOptions,\n          loader,\n        });\n        const result = transform(code, {\n          filename: args.path,\n          preprocessor,\n          pluginOptions: rest,\n        });\n\n        if (!result.cssText) {\n          return {\n            contents: code,\n          };\n        }\n\n        let { cssText } = result;\n\n        const slug = slugify(cssText);\n        const cssFilename = `${filename}_${slug}.linaria.css`;\n\n        if (sourceMap && result.cssSourceMapText) {\n          const map = Buffer.from(result.cssSourceMapText).toString('base64');\n          cssText += `/*# sourceMappingURL=data:application/json;base64,${map}*/`;\n        }\n\n        cssLookup.set(cssFilename, cssText);\n\n        return {\n          contents: `\n          import ${JSON.stringify(cssFilename)};\n          ${result.code}\n          `,\n        };\n      });\n    },\n  };\n}\n"],"file":"index.js"}