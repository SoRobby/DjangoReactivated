"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormSet = exports.Form = exports.createCSRFToken = exports.bindWidgetType = exports.useFormSet = exports.ManagementForm = exports.Widget = exports.createIterator = exports.useForm = exports.getFormHandler = exports.getInitialFormSetErrors = exports.getInitialFormSetState = exports.getInitialFormState = void 0;
var immer_1 = __importStar(require("immer"));
var react_1 = __importDefault(require("react"));
var widgets = __importStar(require("./widgets"));
var getInitialFormState = function (form) {
    var initialValuesAsEntries = form.iterator.map(function (fieldName) {
        var field = form.fields[fieldName];
        var widget = field.widget;
        if (widget.subwidgets != null) {
            var subwidgetValue = Object.fromEntries(widget.subwidgets.map(function (subwidget) {
                var formPrefix = form.prefix === "" ? "" : "".concat(form.prefix, "-");
                var unprefixedName = subwidget.name.replace("".concat(formPrefix).concat(fieldName, "_"), "");
                return [unprefixedName, subwidget.value];
            }));
            return [fieldName, subwidgetValue];
        }
        return [fieldName, widget.value];
    });
    return Object.fromEntries(initialValuesAsEntries);
};
exports.getInitialFormState = getInitialFormState;
var getInitialFormSetState = function (forms) {
    return Object.fromEntries(forms.map(function (form) { return [form.prefix, (0, exports.getInitialFormState)(form)]; }));
};
exports.getInitialFormSetState = getInitialFormSetState;
var getInitialFormSetErrors = function (forms) {
    return Object.fromEntries(forms.map(function (form) { return [form.prefix, form.errors]; }));
};
exports.getInitialFormSetErrors = getInitialFormSetErrors;
var getFormHandler = function (_a) {
    var _b, _c, _d;
    var form = _a.form, values = _a.values, initial = _a.initial, errors = _a.errors, setValues = _a.setValues, setErrors = _a.setErrors, options = __rest(_a, ["form", "values", "initial", "errors", "setValues", "setErrors"]);
    var changeInterceptor = (_b = options.changeInterceptor) !== null && _b !== void 0 ? _b : (function (_, prevValues, nextValues) { return nextValues; });
    var fieldInterceptor = (_c = options.fieldInterceptor) !== null && _c !== void 0 ? _c : (function (fieldName, field) { return field; });
    var changeValues = function (fieldName, getIncomingValues) {
        setValues(function (prevValues) {
            var incomingValues = getIncomingValues(prevValues);
            var nextValues = changeInterceptor(fieldName, prevValues, incomingValues);
            return nextValues;
        });
    };
    var reset = function () {
        setValues(function () { return initial; });
        setErrors({});
    };
    var fields = Object.fromEntries(form.iterator.map(function (fieldName) {
        var _a, _b, _c, _d;
        var field = form.fields[fieldName];
        var error = (_b = (_a = errors === null || errors === void 0 ? void 0 : errors[fieldName]) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;
        var help_text = field.help_text;
        if (field.widget.subwidgets != null) {
            var subwidgets = field.widget.subwidgets.map(function (subwidget) {
                var formPrefix = form.prefix === "" ? "" : "".concat(form.prefix, "-");
                var unprefixedName = subwidget.name.replace("".concat(formPrefix).concat(fieldName, "_"), "");
                var setSubwidgetValue = function (value) {
                    changeValues(fieldName, function (prevValues) {
                        var _a, _b;
                        var subwidgetValues = prevValues[fieldName];
                        var subwidgetValue = subwidgetValues[unprefixedName];
                        return __assign(__assign({}, prevValues), (_a = {}, _a[fieldName] = __assign(__assign({}, subwidgetValues), (_b = {}, _b[unprefixedName] = value, _b)), _a));
                    });
                };
                var subfieldHandler = {
                    name: subwidget.name,
                    error: error,
                    help_text: help_text,
                    label: field.label,
                    disabled: false,
                    tag: subwidget.tag,
                    widget: subwidget,
                    value: values[fieldName][unprefixedName],
                    handler: setSubwidgetValue,
                };
                return subfieldHandler;
            });
            var subwidgetHandler = {
                name: field.widget.name,
                disabled: (_c = field.widget.attrs.disabled) !== null && _c !== void 0 ? _c : false,
                label: field.label,
                error: error,
                help_text: help_text,
                tag: field.widget.tag,
                subwidgets: subwidgets,
            };
            return [
                fieldName,
                fieldInterceptor(fieldName, subwidgetHandler, values),
            ];
        }
        var fieldHandler = {
            name: field.widget.name,
            error: error,
            help_text: help_text,
            label: field.label,
            disabled: (_d = field.widget.attrs.disabled) !== null && _d !== void 0 ? _d : false,
            tag: field.widget.tag,
            widget: field.widget,
            value: values[fieldName],
            handler: function (value) {
                changeValues(fieldName, function (prevValues) {
                    var _a;
                    return (__assign(__assign({}, prevValues), (_a = {}, _a[fieldName] = value, _a)));
                });
            },
        };
        return [
            fieldName,
            fieldInterceptor(fieldName, fieldHandler, values),
        ];
    }));
    var iterate = function (iterator, callback) {
        return iterator.map(function (fieldName) {
            return callback(fieldName, fields[fieldName]);
        });
    };
    var visibleFields = form.iterator
        .filter(function (fieldName) { return fields[fieldName].tag !== "django.forms.widgets.HiddenInput"; })
        .map(function (fieldName) { return fields[fieldName]; });
    var hiddenFields = form.iterator
        .filter(function (fieldName) { return fields[fieldName].tag === "django.forms.widgets.HiddenInput"; })
        .map(function (fieldName) {
        return fields[fieldName];
    });
    var nonFieldErrors = (_d = errors === null || errors === void 0 ? void 0 : errors["__all__"]) !== null && _d !== void 0 ? _d : null;
    return {
        form: form,
        values: values,
        initial: initial,
        errors: errors,
        fields: fields,
        nonFieldErrors: nonFieldErrors,
        visibleFields: visibleFields,
        hiddenFields: hiddenFields,
        iterate: iterate,
        reset: reset,
        setErrors: setErrors,
        setValue: function (fieldName, value) {
            changeValues(fieldName, function (prevValues) {
                var _a;
                return (__assign(__assign({}, prevValues), (_a = {}, _a[fieldName] = value, _a)));
            });
        },
    };
};
exports.getFormHandler = getFormHandler;
var useForm = function (_a) {
    var form = _a.form, options = __rest(_a, ["form"]);
    var initial = (0, exports.getInitialFormState)(form);
    var _b = react_1.default.useState(initial), values = _b[0], formSetValues = _b[1];
    var _c = react_1.default.useState(form.errors), errors = _c[0], setErrors = _c[1];
    return (0, exports.getFormHandler)(__assign(__assign({}, options), { form: form, errors: errors, setErrors: setErrors, initial: initial, values: values, setValues: function (getValuesToSetFromPrevValues) {
            formSetValues(function (prevValues) { return getValuesToSetFromPrevValues(prevValues); });
        } }));
};
exports.useForm = useForm;
var createIterator = function () {
    return function (props) {
        var _a;
        var defaultHandler = "form" in props.form
            ? props.form
            : (0, exports.useForm)({
                form: props.form,
                changeInterceptor: props.changeInterceptor,
            });
        var handler = "form" in props.form ? props.form : defaultHandler;
        var fieldInterceptor = (_a = props.fieldInterceptor) !== null && _a !== void 0 ? _a : (function (fieldName, field, values) { return field; });
        var getIterator = function () {
            if (props.fields != null) {
                return props.fields;
            }
            if (props.exclude != null) {
                return handler.form.iterator.filter(function (field) { return !props.exclude.includes(field); });
            }
            return handler.form.iterator;
        };
        return (react_1.default.createElement(react_1.default.Fragment, null, handler.iterate(getIterator(), function (fieldName, field) { return (react_1.default.createElement(react_1.default.Fragment, { key: field.name }, props.children(fieldInterceptor(fieldName, field, handler.values)))); })));
    };
};
exports.createIterator = createIterator;
var Widget = function (props) {
    var _a, _b;
    var field = props.field;
    if ("subwidgets" in field) {
        return (react_1.default.createElement(react_1.default.Fragment, null, field.subwidgets.map(function (subwidget) {
            return react_1.default.createElement(exports.Widget, { key: subwidget.name, field: subwidget });
        })));
    }
    if (field.tag === "django.forms.widgets.HiddenInput") {
        return react_1.default.createElement("input", { type: "hidden", name: field.name, value: (_a = field.value) !== null && _a !== void 0 ? _a : "" });
    }
    else if (field.tag === "django.forms.widgets.CheckboxInput") {
        return (react_1.default.createElement(widgets.CheckboxInput, { name: field.name, value: field.value, onChange: field.handler }));
    }
    else if (field.tag === "django.forms.widgets.Textarea") {
        return (react_1.default.createElement(widgets.Textarea, { name: field.name, value: field.value, onChange: field.handler }));
    }
    else if (field.tag === "django.forms.widgets.TextInput" ||
        field.tag === "django.forms.widgets.DateInput" ||
        field.tag === "django.forms.widgets.URLInput" ||
        field.tag === "django.forms.widgets.PasswordInput" ||
        field.tag === "django.forms.widgets.EmailInput" ||
        field.tag === "django.forms.widgets.TimeInput" ||
        field.tag === "django.forms.widgets.NumberInput") {
        return (react_1.default.createElement(widgets.TextInput, { name: field.name, value: field.value, onChange: field.handler }));
    }
    else if (field.tag === "django.forms.widgets.Select") {
        return (react_1.default.createElement(widgets.Select, { name: field.name, value: field.value, optgroups: field.widget.optgroups, onChange: field.handler }));
    }
    else if (field.tag === "django.forms.widgets.ClearableFileInput") {
        return react_1.default.createElement("input", { type: "file", name: field.name, value: (_b = field.value) !== null && _b !== void 0 ? _b : "" });
    }
    else if (field.tag === "django.forms.widgets.SelectMultiple") {
        return (react_1.default.createElement("select", { name: field.name, multiple: true, value: field.value, onChange: function (event) {
                var value = Array.from(event.target.selectedOptions, function (option) { return option.value; });
                field.handler(value);
            } }, field.widget.optgroups.map(function (optgroup) {
            var _a;
            var value = ((_a = optgroup[1][0].value) !== null && _a !== void 0 ? _a : "").toString();
            return (react_1.default.createElement("option", { key: value, value: value }, optgroup[1][0].label));
        })));
    }
    var exhastive = field;
    throw new Error("Exhaustive {field.tag}");
};
exports.Widget = Widget;
var ManagementForm = function (_a) {
    var formSet = _a.formSet;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("input", { type: "hidden", name: "".concat(formSet.prefix, "-INITIAL_FORMS"), value: formSet.initial_form_count }),
        react_1.default.createElement("input", { type: "hidden", name: "".concat(formSet.prefix, "-TOTAL_FORMS"), value: formSet.total_form_count })));
};
exports.ManagementForm = ManagementForm;
var useFormSet = function (options) {
    var _a = react_1.default.useState(options.formSet), formSet = _a[0], setFormSet = _a[1];
    var initialFormSetState = (0, exports.getInitialFormSetState)(options.formSet.forms);
    var initialFormSetErrors = (0, exports.getInitialFormSetErrors)(options.formSet.forms);
    var _b = react_1.default.useState(initialFormSetState), values = _b[0], formSetSetValues = _b[1];
    var _c = react_1.default.useState(initialFormSetErrors), errors = _c[0], formSetSetErrors = _c[1];
    var emptyFormValues = (0, exports.getInitialFormState)(formSet.empty_form);
    var forms = formSet.forms.map(function (form, index) {
        var _a, _b, _c;
        return (0, exports.getFormHandler)({
            form: form,
            changeInterceptor: options.changeInterceptor,
            fieldInterceptor: options.fieldInterceptor,
            values: (_a = values[form.prefix]) !== null && _a !== void 0 ? _a : emptyFormValues,
            errors: (_b = errors[form.prefix]) !== null && _b !== void 0 ? _b : {},
            setErrors: function (nextErrors) {
                formSetSetErrors(function (prevErrors) {
                    var _a;
                    return (__assign(__assign({}, prevErrors), (_a = {}, _a[form.prefix] = nextErrors, _a)));
                });
            },
            initial: (_c = initialFormSetState[index]) !== null && _c !== void 0 ? _c : emptyFormValues,
            setValues: function (getValuesToSetFromPrevValues) {
                formSetSetValues(function (prevValues) {
                    var _a;
                    var _b;
                    var nextValues = getValuesToSetFromPrevValues((_b = prevValues[form.prefix]) !== null && _b !== void 0 ? _b : emptyFormValues);
                    return __assign(__assign({}, prevValues), (_a = {}, _a[form.prefix] = nextValues, _a));
                });
            },
        });
    });
    var addForm = function () {
        var _a;
        var total_form_count = formSet.total_form_count;
        var extraForm = (0, immer_1.default)(formSet.empty_form, function (draftState) {
            for (var _i = 0, _a = draftState.iterator; _i < _a.length; _i++) {
                var fieldName = _a[_i];
                var prefix = "".concat(formSet.prefix, "-").concat(formSet.total_form_count);
                var field = draftState.fields[fieldName];
                var htmlName = "".concat(prefix, "-").concat(field.name);
                draftState.fields[fieldName].widget.name = htmlName;
                draftState.fields[fieldName].widget.attrs.id = "id_".concat(htmlName);
                draftState.prefix = prefix;
            }
        });
        var updated = (0, immer_1.default)(formSet, function (draftState) {
            draftState.forms.push((0, immer_1.castDraft)(extraForm));
            draftState.total_form_count += 1;
        });
        setFormSet(updated);
        (_a = options.onAddForm) === null || _a === void 0 ? void 0 : _a.call(options, extraForm);
    };
    return { schema: formSet, values: values, forms: forms, addForm: addForm };
};
exports.useFormSet = useFormSet;
var bindWidgetType = function () {
    var Iterator = (0, exports.createIterator)();
    function createRenderer(callback) {
        var Renderer = function (props) {
            return react_1.default.createElement(Iterator, __assign({}, props), function (field) { return callback(field, props); });
        };
        // This is not used, but here so that children is excluded from required props.
        Renderer.defaultProps = {
            children: function () { return null; },
        };
        return Renderer;
    }
    return {
        createRenderer: createRenderer,
        Iterator: Iterator,
    };
};
exports.bindWidgetType = bindWidgetType;
var createCSRFToken = function (Context) {
    var CSRFToken = function (props) {
        var context = react_1.default.useContext(Context);
        return (react_1.default.createElement("input", { type: "hidden", name: "csrfmiddlewaretoken", value: context.csrf_token }));
    };
    return CSRFToken;
};
exports.createCSRFToken = createCSRFToken;
var Form = function (props) {
    var _a;
    var form = "form" in props.form ? props.form : (0, exports.useForm)({ form: props.form });
    if (props.as == "p") {
        return (react_1.default.createElement(react_1.default.Fragment, null, (_a = form.nonFieldErrors) === null || _a === void 0 ? void 0 :
            _a.map(function (error, index) { return (react_1.default.createElement("div", { key: index }, error)); }),
            form.hiddenFields.map(function (field, index) { return (react_1.default.createElement(exports.Widget, { key: index, field: field })); }),
            form.visibleFields.map(function (field, index) { return (react_1.default.createElement(react_1.default.Fragment, { key: field.name },
                field.error != null && react_1.default.createElement("div", null, field.error),
                react_1.default.createElement("p", null,
                    react_1.default.createElement("label", null, field.label),
                    field.help_text != null && react_1.default.createElement("span", null, field.help_text),
                    react_1.default.createElement(exports.Widget, { field: field })))); })));
    }
    else {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            form.nonFieldErrors != null && (react_1.default.createElement("tr", null, form.nonFieldErrors.map(function (error, index) { return (react_1.default.createElement("td", { key: index, colSpan: 2 }, error)); }))),
            react_1.default.createElement("tr", { style: { display: "none" } }, form.hiddenFields.map(function (field, index) { return (react_1.default.createElement(exports.Widget, { key: index, field: field })); })),
            form.visibleFields.map(function (field, index) { return (react_1.default.createElement("tr", { key: field.name },
                react_1.default.createElement("th", null,
                    react_1.default.createElement("label", null, field.label)),
                react_1.default.createElement("td", null,
                    field.error != null && react_1.default.createElement("div", null, field.error),
                    field.help_text != null && (react_1.default.createElement(react_1.default.Fragment, null,
                        react_1.default.createElement("br", null),
                        react_1.default.createElement("span", null, field.help_text))),
                    react_1.default.createElement(exports.Widget, { field: field })))); })));
    }
};
exports.Form = Form;
var FormSet = function (props) {
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(exports.ManagementForm, { formSet: props.formSet }),
        props.formSet.forms.map(function (form) { return (react_1.default.createElement(exports.Form, { key: form.prefix, form: form, as: props.as })); })));
};
exports.FormSet = FormSet;
//# sourceMappingURL=index.js.map