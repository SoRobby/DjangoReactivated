// Digest: cf7c9b90d63c2c133e94f102e70ea25f81bc7eab
/* eslint-disable */
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface _Types {
  globals: {
    Widget: generated.Types["Widget"];
  };
  Context: ReactivatedSerializationContextProcessorsBaseContext &
    ReactivatedSerializationContextProcessorsMessagesProcessor &
    ReactivatedSerializationContextProcessorsCSRFProcessor &
    ReactivatedSerializationContextProcessorsRequestProcessor &
    ReactivatedSerializationContextProcessorsStaticProcessor;
}
export interface ReactivatedSerializationContextProcessorsBaseContext {
  template_name: string;
}
export interface ReactivatedSerializationContextProcessorsMessagesProcessor {
  messages: ReactivatedSerializationContextProcessorsMessage[];
}
export interface ReactivatedSerializationContextProcessorsMessage {
  level_tag: "info" | "success" | "error" | "warning" | "debug";
  message: string;
  level: number;
  from_server: boolean;
}
export interface ReactivatedSerializationContextProcessorsCSRFProcessor {
  csrf_token: string;
}
export interface ReactivatedSerializationContextProcessorsRequestProcessor {
  request: ReactivatedSerializationContextProcessorsRequest;
}
export interface ReactivatedSerializationContextProcessorsRequest {
  path: string;
  url: string;
}
export interface ReactivatedSerializationContextProcessorsStaticProcessor {
  STATIC_URL: string;
}
const urls = {"admin:index":{"route":"/admin/","args":{}},"admin:login":{"route":"/admin/login/","args":{}},"admin:logout":{"route":"/admin/logout/","args":{}},"admin:password_change":{"route":"/admin/password_change/","args":{}},"admin:password_change_done":{"route":"/admin/password_change/done/","args":{}},"admin:autocomplete":{"route":"/admin/autocomplete/","args":{}},"admin:jsi18n":{"route":"/admin/jsi18n/","args":{}},"admin:view_on_site":{"route":"/admin/r/<int:content_type_id>/<path:object_id>/","args":{"content_type_id":"number","object_id":"string"}},"admin:auth_group_changelist":{"route":"/admin/auth/group/","args":{}},"admin:auth_group_add":{"route":"/admin/auth/group/add/","args":{}},"admin:auth_group_history":{"route":"/admin/auth/group/<path:object_id>/history/","args":{"object_id":"string"}},"admin:auth_group_delete":{"route":"/admin/auth/group/<path:object_id>/delete/","args":{"object_id":"string"}},"admin:auth_group_change":{"route":"/admin/auth/group/<path:object_id>/change/","args":{"object_id":"string"}},"admin/auth/group/<path:object_id>/":{"route":"/admin/auth/group/<path:object_id>/","args":{"object_id":"string"}},"admin:auth_user_password_change":{"route":"/admin/auth/user/<id>/password/","args":{"id":"string"}},"admin:auth_user_changelist":{"route":"/admin/auth/user/","args":{}},"admin:auth_user_add":{"route":"/admin/auth/user/add/","args":{}},"admin:auth_user_history":{"route":"/admin/auth/user/<path:object_id>/history/","args":{"object_id":"string"}},"admin:auth_user_delete":{"route":"/admin/auth/user/<path:object_id>/delete/","args":{"object_id":"string"}},"admin:auth_user_change":{"route":"/admin/auth/user/<path:object_id>/change/","args":{"object_id":"string"}},"admin/auth/user/<path:object_id>/":{"route":"/admin/auth/user/<path:object_id>/","args":{"object_id":"string"}},"__reactivated_do_not_use":{"route":"__reactivated_do_not_use","args":{}},"__reactivated_do_not_use_args":{"route":"__reactivated_do_not_use_args","args":{"_":"string"}}};

export interface URLMap {
    admin_index: admin_index;
    admin_login: admin_login;
    admin_logout: admin_logout;
    admin_password_change: admin_password_change;
    admin_password_change_done: admin_password_change_done;
    admin_autocomplete: admin_autocomplete;
    admin_jsi18n: admin_jsi18n;
    admin_view_on_site: admin_view_on_site;
    admin_auth_group_changelist: admin_auth_group_changelist;
    admin_auth_group_add: admin_auth_group_add;
    admin_auth_group_history: admin_auth_group_history;
    admin_auth_group_delete: admin_auth_group_delete;
    admin_auth_group_change: admin_auth_group_change;
    admin_auth_group__path_object_id__: admin_auth_group__path_object_id__;
    admin_auth_user_password_change: admin_auth_user_password_change;
    admin_auth_user_changelist: admin_auth_user_changelist;
    admin_auth_user_add: admin_auth_user_add;
    admin_auth_user_history: admin_auth_user_history;
    admin_auth_user_delete: admin_auth_user_delete;
    admin_auth_user_change: admin_auth_user_change;
    admin_auth_user__path_object_id__: admin_auth_user__path_object_id__;
    __reactivated_do_not_use: __reactivated_do_not_use;
    __reactivated_do_not_use_args: __reactivated_do_not_use_args;
}

interface admin_index {
    name: 'admin:index';
    args: admin_index_args;
}

interface admin_index_args {
}

interface admin_login {
    name: 'admin:login';
    args: admin_login_args;
}

interface admin_login_args {
}

interface admin_logout {
    name: 'admin:logout';
    args: admin_logout_args;
}

interface admin_logout_args {
}

interface admin_password_change {
    name: 'admin:password_change';
    args: admin_password_change_args;
}

interface admin_password_change_args {
}

interface admin_password_change_done {
    name: 'admin:password_change_done';
    args: admin_password_change_done_args;
}

interface admin_password_change_done_args {
}

interface admin_autocomplete {
    name: 'admin:autocomplete';
    args: admin_autocomplete_args;
}

interface admin_autocomplete_args {
}

interface admin_jsi18n {
    name: 'admin:jsi18n';
    args: admin_jsi18n_args;
}

interface admin_jsi18n_args {
}

interface admin_view_on_site {
    name: 'admin:view_on_site';
    args: admin_view_on_site_args;
}

interface admin_view_on_site_args {
    content_type_id: number;
    object_id: string;
}

interface admin_auth_group_changelist {
    name: 'admin:auth_group_changelist';
    args: admin_auth_group_changelist_args;
}

interface admin_auth_group_changelist_args {
}

interface admin_auth_group_add {
    name: 'admin:auth_group_add';
    args: admin_auth_group_add_args;
}

interface admin_auth_group_add_args {
}

interface admin_auth_group_history {
    name: 'admin:auth_group_history';
    args: admin_auth_group_history_args;
}

interface admin_auth_group_history_args {
    object_id: string;
}

interface admin_auth_group_delete {
    name: 'admin:auth_group_delete';
    args: admin_auth_group_delete_args;
}

interface admin_auth_group_delete_args {
    object_id: string;
}

interface admin_auth_group_change {
    name: 'admin:auth_group_change';
    args: admin_auth_group_change_args;
}

interface admin_auth_group_change_args {
    object_id: string;
}

interface admin_auth_group__path_object_id__ {
    name: 'admin/auth/group/<path:object_id>/';
    args: admin_auth_group__path_object_id___args;
}

interface admin_auth_group__path_object_id___args {
    object_id: string;
}

interface admin_auth_user_password_change {
    name: 'admin:auth_user_password_change';
    args: admin_auth_user_password_change_args;
}

interface admin_auth_user_password_change_args {
    id: string;
}

interface admin_auth_user_changelist {
    name: 'admin:auth_user_changelist';
    args: admin_auth_user_changelist_args;
}

interface admin_auth_user_changelist_args {
}

interface admin_auth_user_add {
    name: 'admin:auth_user_add';
    args: admin_auth_user_add_args;
}

interface admin_auth_user_add_args {
}

interface admin_auth_user_history {
    name: 'admin:auth_user_history';
    args: admin_auth_user_history_args;
}

interface admin_auth_user_history_args {
    object_id: string;
}

interface admin_auth_user_delete {
    name: 'admin:auth_user_delete';
    args: admin_auth_user_delete_args;
}

interface admin_auth_user_delete_args {
    object_id: string;
}

interface admin_auth_user_change {
    name: 'admin:auth_user_change';
    args: admin_auth_user_change_args;
}

interface admin_auth_user_change_args {
    object_id: string;
}

interface admin_auth_user__path_object_id__ {
    name: 'admin/auth/user/<path:object_id>/';
    args: admin_auth_user__path_object_id___args;
}

interface admin_auth_user__path_object_id___args {
    object_id: string;
}

interface __reactivated_do_not_use {
    name: '__reactivated_do_not_use';
    args: __reactivated_do_not_use_args;
}

interface __reactivated_do_not_use_args {
}

interface __reactivated_do_not_use_args {
    name: '__reactivated_do_not_use_args';
    args: __reactivated_do_not_use_args_args;
}

interface __reactivated_do_not_use_args_args {
    _: string;
}

type WithArguments = |admin_view_on_site|admin_auth_group_history|admin_auth_group_delete|admin_auth_group_change|admin_auth_group__path_object_id__|admin_auth_user_password_change|admin_auth_user_history|admin_auth_user_delete|admin_auth_user_change|admin_auth_user__path_object_id__|__reactivated_do_not_use_args;
type WithoutArguments = |admin_index|admin_login|admin_logout|admin_password_change|admin_password_change_done|admin_autocomplete|admin_jsi18n|admin_auth_group_changelist|admin_auth_group_add|admin_auth_user_changelist|admin_auth_user_add|__reactivated_do_not_use;


    type All = WithArguments|WithoutArguments;
    export function reverse<T extends WithoutArguments['name']>(name: T): string;
    export function reverse<T extends WithArguments['name']>(name: T, args: Extract<WithArguments, {name: T}>['args']): string;
    export function reverse<T extends All['name']>(name: T, args?: Extract<WithArguments, {name: T}>['args']): string {
        let route = urls[name].route;

        if (args != null) {
            for (const token of Object.keys(args)) {
                route = route.replace(new RegExp('<(.+?:)' + token + '>'), (args as any)[token]);
            }
        }
        return route;
    }

import React from "react"
import createContext from "reactivated/context";
import * as forms from "reactivated/forms";
import * as generated from "reactivated/generated";

// Note: this needs strict function types to behave correctly with excess properties etc.
export type Checker<P, U extends (React.FunctionComponent<P> | React.ComponentClass<P>)> = {};

export const {Context, Provider, getServerData} = createContext<_Types["Context"]>();

export const getTemplate = ({template_name}: {template_name: string}) => {
    // This require needs to be *inside* the function to avoid circular dependencies with esbuild.
    const { default: templates, filenames } = require('../../client/templates/**/*');
    const templatePath = "../../client/templates/" + template_name + ".tsx";
    const possibleTemplate: {default: React.ComponentType<any>} | null = templates.find((t: any, index: number) => filenames[index] === templatePath);

    if (possibleTemplate == null) {
        throw new Error("Template " + template_name + ".tsx not found");
    }
    return possibleTemplate.default;
}

export const CSRFToken = forms.createCSRFToken(Context);

export const {createRenderer, Iterator} = forms.bindWidgetType<_Types["globals"]["Widget"]>();
export type FieldHandler = forms.FieldHandler<_Types["globals"]["Widget"]>;

export const {Form, FormSet, Widget} = forms;

