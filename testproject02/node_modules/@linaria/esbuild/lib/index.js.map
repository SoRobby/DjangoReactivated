{"version":3,"sources":["../src/index.ts"],"names":["nodeModulesRegex","linaria","sourceMap","preprocessor","esbuildOptions","rest","name","setup","build","cssLookup","Map","onResolve","filter","args","namespace","path","onLoad","contents","get","loader","resolveDir","basename","rawCode","fs","readFileSync","ext","filename","parse","replace","test","initialOptions","jsxFactory","jsxFragment","code","result","pluginOptions","cssText","slug","cssFilename","cssSourceMapText","map","Buffer","from","toString","set","JSON","stringify"],"mappings":"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","sourcesContent":["/**\n * This file contains an esbuild loader for Linaria.\n * It uses the transform.ts function to generate class names from source code,\n * returns transformed code without template literals and attaches generated source maps\n */\n\nimport path from 'path';\nimport fs from 'fs';\nimport type { PluginOptions, Preprocessor } from '@linaria/babel-preset';\nimport { slugify, transform } from '@linaria/babel-preset';\nimport { transformSync, Plugin, TransformOptions, Loader } from 'esbuild';\n\ntype EsbuildPluginOptions = {\n  sourceMap?: boolean;\n  preprocessor?: Preprocessor;\n  esbuildOptions?: TransformOptions;\n} & Partial<PluginOptions>;\n\nconst nodeModulesRegex = /^(?:.*[\\\\/])?node_modules(?:[\\\\/].*)?$/;\n\nexport default function linaria({\n  sourceMap,\n  preprocessor,\n  esbuildOptions,\n  ...rest\n}: EsbuildPluginOptions = {}): Plugin {\n  return {\n    name: 'linaria',\n    setup(build) {\n      const cssLookup = new Map<string, string>();\n\n      build.onResolve({ filter: /\\.linaria\\.css$/ }, (args) => {\n        return {\n          namespace: 'linaria',\n          path: args.path,\n        };\n      });\n\n      build.onLoad({ filter: /.*/, namespace: 'linaria' }, (args) => {\n        return {\n          contents: cssLookup.get(args.path),\n          loader: 'css',\n          resolveDir: path.basename(args.path),\n        };\n      });\n\n      build.onLoad({ filter: /\\.(js|jsx|ts|tsx)$/ }, (args) => {\n        const rawCode = fs.readFileSync(args.path, 'utf8');\n        const { ext, name: filename } = path.parse(args.path);\n        const loader = ext.replace(/^\\./, '') as Loader;\n\n        if (nodeModulesRegex.test(args.path)) {\n          return {\n            loader,\n            contents: rawCode,\n          };\n        }\n\n        if (typeof esbuildOptions === 'undefined') {\n          esbuildOptions = {};\n          if ('jsxFactory' in build.initialOptions) {\n            esbuildOptions.jsxFactory = build.initialOptions.jsxFactory;\n          }\n          if ('jsxFragment' in build.initialOptions) {\n            esbuildOptions.jsxFragment = build.initialOptions.jsxFragment;\n          }\n        }\n\n        const { code } = transformSync(rawCode, {\n          ...esbuildOptions,\n          loader,\n        });\n        const result = transform(code, {\n          filename: args.path,\n          preprocessor,\n          pluginOptions: rest,\n        });\n\n        if (!result.cssText) {\n          return {\n            contents: code,\n          };\n        }\n\n        let { cssText } = result;\n\n        const slug = slugify(cssText);\n        const cssFilename = `${filename}_${slug}.linaria.css`;\n\n        if (sourceMap && result.cssSourceMapText) {\n          const map = Buffer.from(result.cssSourceMapText).toString('base64');\n          cssText += `/*# sourceMappingURL=data:application/json;base64,${map}*/`;\n        }\n\n        cssLookup.set(cssFilename, cssText);\n\n        return {\n          contents: `\n          import ${JSON.stringify(cssFilename)};\n          ${result.code}\n          `,\n        };\n      });\n    },\n  };\n}\n"],"file":"index.js"}